"""
cuda

CUDA Tool for SCons

"""

import os

import SCons.Defaults
import SCons.Scanner.C
import SCons.Tool

CUDAScanner = SCons.Scanner.C.CScanner()


# this object emitters add '.linkinfo' suffixed files as extra targets
# these files are generated by nvcc. The reason to do this is to remove
# the extra .linkinfo files when calling scons -c
def CUDANVCCStaticObjectEmitter(target, source, env):
    tgt, src = SCons.Defaults.StaticObjectEmitter(target, source, env)
    for file in src:
        lifile = os.path.splitext(src[0].rstr())[0] + ".linkinfo"  # noqa F841
        # tgt.append(lifile)
    return tgt, src


def CUDANVCCSharedObjectEmitter(target, source, env):
    tgt, src = SCons.Defaults.SharedObjectEmitter(target, source, env)
    for file in src:
        lifile = os.path.splitext(src[0].rstr())[0] + ".linkinfo"  # noqa F841
        # tgt.append(lifile)
    return tgt, src


def generate(env):
    staticObjBuilder, sharedObjBuilder = SCons.Tool.createObjBuilders(env)
    staticObjBuilder.add_action(".cu", "$STATICNVCCCMD")
    staticObjBuilder.add_emitter(".cu", CUDANVCCStaticObjectEmitter)
    sharedObjBuilder.add_action(".cu", "$SHAREDNVCCCMD")
    sharedObjBuilder.add_emitter(".cu", CUDANVCCSharedObjectEmitter)
    SCons.Tool.SourceFileScanner.add_scanner(".cu", CUDAScanner)

    # default compiler
    env["NVCC"] = "nvcc"

    # default flags for the NVCC compiler
    env["NVCCFLAGS"] = ""
    env["STATICNVCCFLAGS"] = ""
    env["SHAREDNVCCFLAGS"] = ""
    env["ENABLESHAREDNVCCFLAG"] = "-shared"
    env["NVCCCMDLINE"] = ""

    # default NVCC commands
    env[
        "STATICNVCCCMD"
    ] = "$NVCC -o $TARGET -c $NVCCFLAGS $_CPPINCFLAGS $STATICNVCCFLAGS $NVCCCMDLINE $SOURCES"
    env["SHAREDNVCCCMD"] = (
        "$NVCC -o $TARGET -c $NVCCFLAGS $_CPPINCFLAGS $SHAREDNVCCFLAGS"
        " $ENABLESHAREDNVCCFLAG $NVCCCMDLINE $SOURCES"
    )


def exists(env):
    return env.Detect("nvcc")
