# -*- python -*-

import lsst.sconsUtils
import re
import os.path
import subprocess

dependencies = {}


class Configuration(lsst.sconsUtils.Configuration):

    def __init__(self):
        self.name, self.root = self.parseFilename(__file__)

    @staticmethod
    def _get_config_var(name):
        """The relevant Python is not guaranteed to be the Python
        that we are using to run SCons so we must shell out to the
        PATH python."""
        pycmd = 'import sysconfig as s; print(s.get_config_var("{}"))'.format(name)
        result = subprocess.check_output(["python", "-c", pycmd]).decode().strip()
        # Be consistent with native interface
        if result == "None":
            result = None
        return result

    def configure(self, conf, packages, check=False, build=True):
        lsst.sconsUtils.log.info("Configuring package '%s'." % self.name)
        conf.env.AppendUnique(XCPPPATH=self._get_config_var("CONFINCLUDEPY").split())

        return True


config = Configuration()
